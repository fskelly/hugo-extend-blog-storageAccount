[{"content":"Azure Resource Graph Examples 😄\n Azure Resource Graph   --\rThis is just a quick post. I am slowly working on building a collection of Resource Graph Queries - they can be found here and will grow over time. It just takes some time to build these.\nThey will be broken down into a folder structure based upon the Critical Design Areas of Enterprise Scale Landing Zone\n folderStructure \nHope this helps and keep an eye out for more.\nFollow me for more.\nTwitter LinkedIn\n","date":"2021-08-25T05:58:18+02:00","permalink":"https://cloud.fskelly.com/p/azure-resource-group-enterprise-scale-landing-zone-queries/","title":"Azure Resource Group Enterprise Scale Landing Zone queries"},{"content":"Some basic \u0026ldquo;troubleshooting\u0026rdquo; with Azure Bicep So, let me start with this. The team and the community behind Azure Bicep are amazing. There are some great examples here. I often use these as a base and the rip apart or add to meet my needs, you do NOT need to start from ground zero. 😄\nWhen you are deploying bicep templates you command will look something like this.\n$bicepFile = \u0026#34;.\\main.bicep\u0026#34; New-AzResourceGroupDeployment -ResourceGroupName \u0026lt;resourceGroupName\u0026gt; -TemplateFile \u0026lt;bicepFilePath\u0026gt; -name \u0026lt;deploymentname\u0026gt; I love to use repeatable code, so mine has more variables and would look like this.\n## Place Resource Group Name here $rgName = \u0026#34;testingRG\u0026#34; ## add tags if you want to add metadata $tags = @{\u0026#34;deploymentMethod\u0026#34;=\u0026#34;bicep\u0026#34;; \u0026#34;Can Be Deleted\u0026#34;=\u0026#34;yes\u0026#34;} ## location to be deployed into $rgLocation = \u0026#34;westeurope\u0026#34; #use this command when you need to create a new resource group for your deployment $rg = New-AzResourceGroup -Name $rgName -Location $rgLocation New-AzTag -ResourceId $rg.ResourceId -Tag $tags ## bicep Deployment ## Bicep File name $bicepFile = \u0026#34;.\\main.bicep\u0026#34; $deploymentName = ($bicepFile).Substring(2) + \u0026#34;-\u0026#34; +(get-date -Format ddMMyyyy-hhmmss) + \u0026#34;-deployment\u0026#34; New-AzResourceGroupDeployment -ResourceGroupName $rgName -TemplateFile $bicepFile -name $deploymentName When trying to deploy you might get an error like this.  deployment errors \nAnd that is very cryptic and NOT easy to understand. The easiest fix here is to go back to basics. 😄\naz bicep build --file .\\main.bicep This will then throw the actual bicep error, and then you can fix your file and deploy again.\nHope this helps you.\n","date":"2021-07-02T05:40:16+02:00","permalink":"https://cloud.fskelly.com/p/bicep-troubleshooting/","title":"Bicep Troubleshooting"},{"content":"How to use the Azure CLI to list Azure Locations and their peers So this will be a \u0026ldquo;quick post\u0026rdquo; that shows some great functionality within the Azure CLI with az account list-locations. With this command you can expect some output like below, you actually get a lot of content back.\n{ \u0026#34;displayName\u0026#34;: \u0026#34;Brazil Southeast\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;/subscriptions/949ef534-07f5-4138-8b79-aae16a71310c/locations/brazilsoutheast\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;geographyGroup\u0026#34;: \u0026#34;South America\u0026#34;, \u0026#34;latitude\u0026#34;: \u0026#34;-22.90278\u0026#34;, \u0026#34;longitude\u0026#34;: \u0026#34;-43.2075\u0026#34;, \u0026#34;pairedRegion\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;/subscriptions/949ef534-07f5-4138-8b79-aae16a71310c/locations/brazilsouth\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;brazilsouth\u0026#34;, \u0026#34;subscriptionId\u0026#34;: null } ], \u0026#34;physicalLocation\u0026#34;: \u0026#34;Rio\u0026#34;, \u0026#34;regionCategory\u0026#34;: \u0026#34;Other\u0026#34;, \u0026#34;regionType\u0026#34;: \u0026#34;Physical\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;brazilsoutheast\u0026#34;, \u0026#34;regionalDisplayName\u0026#34;: \u0026#34;(South America) Brazil Southeast\u0026#34;, \u0026#34;subscriptionId\u0026#34;: null } If you look at some of the examples, you will also see some \u0026ldquo;logical\u0026rdquo; locations, example below, there is a way of adding a query to remove these to display only \u0026ldquo;physical\u0026rdquo; locations.\n{ \u0026#34;displayName\u0026#34;: \u0026#34;United States\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;/subscriptions/949ef534-07f5-4138-8b79-aae16a71310c/cations/unitedstates\u0026#34;, \u0026#34;metadata\u0026#34;: { \u0026#34;geographyGroup\u0026#34;: null, \u0026#34;latitude\u0026#34;: null, \u0026#34;longitude\u0026#34;: null, \u0026#34;pairedRegion\u0026#34;: null, \u0026#34;physicalLocation\u0026#34;: null, \u0026#34;regionCategory\u0026#34;: \u0026#34;Other\u0026#34;, \u0026#34;regionType\u0026#34;: \u0026#34;Logical\u0026#34; }, \u0026#34;name\u0026#34;: \u0026#34;unitedstates\u0026#34;, \u0026#34;regionalDisplayName\u0026#34;: \u0026#34;United States\u0026#34;, \u0026#34;subscriptionId\u0026#34;: null } I use a simple query to remove all locations without latitide and in my case simply return the Region Name 😄\naz account list-locations --query \u0026#34;[?not_null(metadata.latitude)] .{RegionName:name}\u0026#34; --output json { \u0026#34;RegionName\u0026#34;: \u0026#34;brazilsoutheast\u0026#34; } So, now to get the paired region, again if we look at the JSON output, there is ALWAYS only 1 result within the array for Paired Region; as per this only 1 paired region 😄. We will use this to our advantage\naz account list-locations --query \u0026#34;[?not_null(metadata.latitude)] .{RegionName:name, PairedRegion:metadata.pairedRegion[0].name}\u0026#34; --output json { \u0026#34;PairedRegion\u0026#34;: \u0026#34;brazilsouth\u0026#34;, \u0026#34;RegionName\u0026#34;: \u0026#34;brazilsoutheast\u0026#34; } ","date":"2021-05-05T07:03:02+02:00","permalink":"https://cloud.fskelly.com/p/cli-list-locations-and-peers/","title":"Cli List Locations and Peers"},{"content":"Absolute basics with Azure and PostMan Getting started Many of the articles I have found online with regards to the Azure REST API assume a fair level of familiarity with Azure which can be a good and bad thing. You see the Azure Portal makes interacting with the Azure REST API very easy as a lot of the \u0026ldquo;prerequisite\u0026rdquo; work is done in the portal as part of the process. For this blog post we will work on something quite basic, \u0026ldquo;Create a Virtual Machine\u0026rdquo;.\nJon Gallant has some great content around this and I did use some content from here, thank you Jon Gallant.\nWithin the Azure Portal this is very easy and only requires a few clicks, however under the hood, in order for the Azure REST API to work, there is a lot more going on. Lets dive in 😄\nAPI Order  Have a Resource Group available or create one. Have a Virtual Network (VNET) available or create one. Create a Virtual Network Interface Card (NIC) or create one. Create a Virtual Machine.  There is a lot of association and the like that goes on in the background.\n Resource Group created. NIC associated to VNET. NIC associated to VM. VM created in Resource Group.  Using the API So, what I have done, is simply create a collection within Postman that uses both collection variables and \u0026ldquo;Pre-request\u0026rdquo; scripts to make this collection \u0026ldquo;portable\u0026rdquo;.\nPostman Collection I use a set of collection variables to help with the initial API Call.  Postman Api Collection  With each of the call you will the variables enclosed with \u0026ldquo;{}\u0026rdquo; and path variables prefixed with \u0026ldquo;:\u0026rdquo;  Postman with Variables  With most of the Postman queries, the \u0026ldquo;Pre-request Script\u0026rdquo; is also used, this is used to set \u0026ldquo;extra\u0026rdquo; pieces of information, for example, specifying a location for the Resource Group.  Postman with pre-request script \nSo, go forth and play. My Postman Collection can be found here\n","date":"2021-04-14T09:02:18+02:00","permalink":"https://cloud.fskelly.com/p/azure-rest-api-postman-basics/","title":"Azure Rest Api Postman Basics"},{"content":"I was working with a customer the other day and a fairly simple ask came up, I however could not find an immediate answer within the portal.\nHow do I check for expiring keys within the Azure KeyVault?\nNow being a PowerShell person, I never gave this much thought as for most tasks or actions I perform on the Azure Platform is done through PowerShell, AP, or CLI. So easy enough, however, not everyone knows how to do this in PowerShell. So, I created a simple script.\nMy requirements\n You can specify the days to check as your expiry window. You can also check for non-expiring keys. Can be run within the Cloud Shell  For me, it is equally important to check for expiring keys, for key rotation there is a process to do this. Just as important, if not MORE IMPORTANT is non-expiring keys (think \u0026ldquo;password never expires on a Domain Admin account\u0026rdquo;).\nI was simply after a quick and easy click and run script. THe script is hosted on my repo and the specific script can be found here\n$vaultName = \u0026#34;\u0026#34; $kvRG = \u0026#34;\u0026#34; $kv = Get-AzKeyVault -ResourceGroupName $kvRG -VaultName $vaultName $secrets = Get-AzKeyVaultSecret -VaultName $kv.VaultName $nonExpiringSecrets = $secrets | Where-Object {$_.Expires -eq $null} $expiringSecrets = $secrets | Where-Object {$_.Expires -ne $null} $daysToCheck = 90 $expireDate = (Get-Date).AddDays($daysToCheck) foreach ($expiringSecret in $expiringSecrets) { if ($expiringSecret.Expires -lt $expireDate) { Write-Host ($expiringSecret).name \u0026#34;is in the expiry window of $daysToCheck days\u0026#34; } } foreach ($nonExpiringSecret in $nonExpiringSecrets) { Write-host ($nonExpiringSecret).name \u0026#34; is set to NEVER expire\u0026#34; } As you can see simply replace the variables that you need to, namely $vaultName (name of the Azure Keyvault) and $kvRG (name of the Resource Group housing the Azure Keyvault)\n","date":"2021-01-18T07:06:03+02:00","permalink":"https://cloud.fskelly.com/p/expiring-keys-and-secrets-within-azure-key-vault/","title":"Expiring Keys and Secrets within Azure Key Vault"},{"content":"I moved my blog onto HUGO. Not everyone would want to do this necessarily, there is a bit of a learning curve, part of the reason I DID IT :). However there are other platforms you can use and still add more functionality if you want.\nYou can use Ghost and add an Azure CDN. This is what this blog post will cover.\nThere are some very clever people out there that have made this very easy for you. From my research you have 2 main options.\n A \u0026ldquo;simple Web App\u0026rdquo; More complex deployment with Containers and a CDN - now this sounds interesting.  For this post I naturally focused on option 2 :). A BIG shoutout goes to Andrew Matveychuk. I am all about \u0026ldquo;Standing on the shoulders of giants\u0026quot;. I used his repo and then forked it into mine. He has a nice blogpost on his journey. I simply unpacked this a little further and went into some more details and highlight some of the potential gotchas and setting up things in more detail with specific focus on the Azure Portal.\nDeployment The deployment is nice and easy thanks to a one-click deploy - thanks again Andrew Matveychuk.\n Deployment Start \n Deployment In Progress \n Deployment Complete \nIt \u0026ldquo;deploys\u0026rdquo; pretty quickly but, of course, this is just the start of the work.\nDuring deployment During the deployment of the application you will see the Web App change.\n Initial Web App \nAlmost  New App being deployed \nSuccess!!!\nYou will see something SIMILAR to this.  New App deployed \nGotcha with Container Deployment The solution takes a while to deploy - this seems to be due to some changes made recently by Docker. Do NOT be hasty like I was, this can cause issues and create the need for a re-deploy. Instead lets use the logs to see what is going on :)\nNow let\u0026rsquo;s find the log I was talking about.  Docker Logs  We are waiting for this entry  Magic Moment \nSo, now to add move value, we can add an Azure CDN (in this case, this has already been done) and look at configuring your own custom name for this.\nA content delivery network (CDN) is a distributed network of servers that can efficiently deliver web content to users. CDNs' store cached content on edge servers in point-of-presence (POP) locations that are close to end users, to minimize latency.\nSo we can add a custom domain to a CDN to make this more pretty and give your site a more more friendly name - you can move away from the https://xyz.azurewebsites.net, I definitely think a custom domain is far cleaner and \u0026ldquo;more professional\u0026rdquo;. So let\u0026rsquo;s dive in and get this done. :)\nSo, there a few steps to get this done. This is well documented here, however I will provide more context and give some sample screenshots.\nWe have some DNS Settings to configure as per the above article. Below, I have added some sample for the CDN demo I configure for this blog.\n Create the required verification entries in your DNS Zone. I use ClouDNS but the process is the same, just how you create the required entries will vary with each provider.  Required Verification Entries  This process should not take too long, but now we want a certificate and the joys of TLS Start the verification process  Start of Process  Domain Verification  Domain Validation  Create a certificate  certificate provisioning  And completed  process complete   Now here is the end result - note the HTTPS 👍  site with HTTPS Cert \n","date":"2021-01-11T07:00:18+02:00","permalink":"https://cloud.fskelly.com/p/azure-ghost-cms-and-cdn/","title":"Azure Ghost Cms and Cdn"},{"content":"So, I have spent the last few days / weeks deciding the best way to host a blog. Now I have a decidedly \u0026ldquo;split personality\u0026rdquo;. By this I mean I like to segregate my work and personal hobbies. This can be quite beneficial as this allows me to test a few things.\nA few key decisions  Must be version controlled - good practice and forces me to get more familiar with git. Must be reliable and redundant, or at least enough to re-deploy if needed - see point 1 :) . Must be as cheap as possible to run and be fairly quick. Must be a learning experience.  Points 1 and 2 makes git a natural choice. Point 3 makes Azure or GitHub Pages a natural choice. For point 4, With this being my \u0026ldquo;work persona\u0026rdquo; I chose Azure Static Web App. I have used GitHub Pages for my \u0026ldquo;personal persona\u0026rdquo;.\nSo now with the basics out of the way, I needed to chose a static content generator. Based on discussions with a few people and again wanting to learn something, hugo was chosen and then there is a great guide here as a starting point.\nThe blog you are reading now is hosted with the above criteria and of course a custom domain name.\nMore to come soon.\n","date":"2021-01-05T15:57:04+02:00","permalink":"https://cloud.fskelly.com/p/my-new-blog-home-with-azure-static-web-app/","title":"My New Blog Home with Azure Static Web App"},{"content":"As a start to this blog post, I think it is important to understand how I see my role as a CSA (Cloud Solution Architect) with my customer. I am primarily a trusted advisor and my customers respect what I have to say, I question and challenge my customers in a constructive way to approach the challenge or problem statement in a different way. I have an amazing role of using Azure as my LEGO playpen and then building a custom solution (LEGO model) to help my customers.\nSo, of late I have been having a lot of networking discussions with my customers. Now these discussions have been ranging from a new customer to a very advanced customer that has been using Azure for quite some time. These have also ranged from new connection options to extend their on-premises connectivity into Azure, which we call \u0026ldquo;Hybrid Connectivity\u0026rdquo;, as well as networking considerations once in the cloud with Azure Native connectivity such AKS (Azure Kubernetes Service) and ACI (Azure Container Instances) to simply name the current most top of mind topics.\nSo, having these discussions is not an uncommon practice and these are the types of discussions that should be happening, there is nothing wrong with this. All that is happening more and more often is that these discussions are happening in isolation as opposed to the customer working on having a holistic approach to this discussion and working on a full cloud networking solution.\nYou cannot necessarily think of networking in silos anymore. Yes, networking can be silo\u0026rsquo;ed and many people do this. However with the \u0026ldquo;new world\u0026rdquo; of cloud and the networking associated to this concept, networking is now a critical point on your cloud journey. There are multiple options available here as a start. THe main role of a Cloud SOlutions Architect or more importantly a trusted advisor, is to understand the requirements of your customer and work with the required teams, usually networking, InfoSec, business owner and Application owner to determine the correct networking option for the cusotmer. This would be a mix of solutions and architectures.\nThis is a great start to understanding which technologies can or could be used to serve a particular need and then this can be built up to a solution that is extendable and usable by your customer.\n","date":"2019-08-07T16:33:36+02:00","permalink":"https://cloud.fskelly.com/p/importance-of-networking-azure/","title":"Importance of Networking Azure"},{"content":"So a question I often get asked is \u0026ldquo;what tools or products do you use?\u0026rdquo;. So I decided to do a post around the tools and technologies that I personally use on a daily basis. So to start this is what people see on my screen on a daily basis.\n VSCode \nThis is my most common tool, Visual Studio Code, the version shown above is actually the Insiders Build. The primary reason for this tool is that is a \u0026ldquo;container\u0026rdquo; for other tools and functionality. The extra functionality is enabled with extensions, my most used extensions are as follows:\n Docker, love my containers. GitLens, used for my source control, all my code is located here for my Azure related code Azure Account (VSCode Extension) , this allows me to run the Azure Cloud Shell from within VSCode, this includes both PowerShell and BASH. Kubernetes, can\u0026rsquo;t really have Docker without this nowadays :)  Now, aside from Visual Studio Code, I also use the following:\n WSL \n Windows Terminal (Preview), I use this extensively for testing of code and running Docker WSL2 (Windows Subsystem for Linux 2), I am running the Preview version of this as it is not yet GA, but so far so good.  I use many other applications, however this is my collection of \u0026ldquo;go-to\u0026rdquo; tools. This should be in your \u0026ldquo;cloud arsenal\u0026rdquo;\n","date":"2019-07-09T16:46:43+02:00","permalink":"https://cloud.fskelly.com/p/csa-tools-of-the-trade/","title":"Csa Tools of the Trade"},{"content":"So, I was with a customer and they are asking for a fairly standard alert.\n\u0026ldquo;Please alert me when an NSG is added or modified\u0026rdquo;. Seems simply enough, however this is not as simply as you think. So I used my favourite search and found the following, “How to receive an email on Azure Network Security Group Rule changes“, this is great content and after testing, it works exactly as expected. I just found one little concern with this approach; this is simply finding the required ID for the action group. I have now investigated and found some code to make this a little easier.\nAZ CLI\naz monitor action-group list PowerShell\nGet-AzActionGroup Hope this helps people in the field to find the Resource Group ID more easily.\n","date":"2019-02-20T08:21:49+02:00","permalink":"https://cloud.fskelly.com/p/network-security-group-change-alerting/","title":"Network Security Group Change Alerting"}]